#!/usr/bin/perl -w
# Автор: Юрий Решетников <reshu@mail.ru>
use strict;
use warnings;
use utf8;
use Reshu::Utils;

my($new_script,$old,%attrs);
while(@ARGV) {
    my $key = shift @ARGV;
    if($key eq '--new' || $key eq '-n') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !defined $new_script;
	$new_script = shift @ARGV;
    }
    elsif($key eq '--old' || $key eq '-o') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !defined $old;
	$old->{script} = shift @ARGV;
    }
    elsif($key eq '--db') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !exists($old->{script}) && !exists($old->{db});
	$old->{db} = shift @ARGV;
    }
    elsif($key eq '--defaults-file') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !exists($old->{script}) && !exists($old->{defaults_file});
	$old->{defaults_file} = shift @ARGV;
    }
    elsif($key eq '--host' || $key eq '-h') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !exists($old->{script}) && !exists($old->{host});
	$old->{host} = shift @ARGV;
    }
    elsif($key eq '--user' || $key eq '-u') {
	die eval dw qw($new_script $old $key \@ARGV) unless @ARGV && !exists($old->{script}) && !exists($old->{user});
	$old->{user} = shift @ARGV;
    }
    elsif($key eq '--password' || $key eq '-p') {
	die eval dw qw($new_script $old $key \@ARGV)
	    unless !exists($old->{script}) && !exists($old->{password}) && !exists($old->{read_password});
	$old->{read_password} = 1;
    }
    elsif($key =~ s/\A-p// || $key =~ s/\A--password=//) {
	die eval dw qw($new_script $old $key \@ARGV)
	    unless !exists($old->{script}) && !exists($old->{password}) && !exists($old->{read_password});
	$old->{password} = $key;
    }
    elsif($key eq '--uncomment-drops' || $key eq '--uncomment_drops') { ++$attrs{uncomment_drops}; }
    else { die eval dw qw($new_script $old $key \@ARGV); }
}
die eval dw qw($new_script $old) unless $new_script && $old && ($old->{script} || $old->{db});

# warn eval dw qw($new_script $old);

my $low_table_names;
my %type_map = (
    'int(11)' => 'integer',
    'bigint(20)' => 'bigint',
    'int(10) unsigned' => 'integer unsigned',
    'bigint(20) unsigned' => 'bigint unsigned',
    # 'tinyint(4)' => 'tinyint',
);

my $new_struct = &read_script($new_script);
my $old_struct;
if($old->{script}) { $old_struct = &read_script($old->{script}); }
else { die '+++ ', eval dw qw($old); }

&sql_alter_tables($old_struct, $new_struct);
&sql_alter_triggers($old_struct, $new_struct);

sub read_script {
    my $script = shift;
    my $db;
    xopen my($in), '<', $script;
    while(defined(my $line = <$in>)) {
	if($line =~ /\A\s*--/) {}
	elsif($line =~ /\A\s*\z/) {}
	elsif($line =~ /\A\s*create\s+database\s+.*;\s*\z/i) {}
	elsif($line =~ /\A\s*use\s+.*;\s*\z/i) {}
	elsif($line =~ /\A\s*drop\s+table\s+.*;\s*\z/i) {}
	elsif($line =~ /\A\s*create\s+table\s+(`.+`)\s*\(\s*\z/i) {
	    my $table_qname = $1;
	    die eval dw qw($table_qname $db->{tables}{$table_qname}) if $db->{tables}{$table_qname};
	    my $sql = $line;
	    while(1) {
		die eval dw qw($sql) unless defined($line = <$in>);
		$sql .= $line;
		last if $line =~ /\A\s*\).*;\s*\z/;
	    }
	    $db->{tables}{$table_qname} = &read_mysql_struct($sql);
	}
	elsif($line =~ /\A\s*alter\s+table\s+(`.+`)\s*\z/i) {
	    # mysqldump такого не генерирует, но в моих данных это будет
	    my $table_qname = $1;
	    my $xn = qr/\`[^,\\\`]+\`/;
	    my $xnp = qr/(\`[^,\\\`]+\`)/;
	    my $xk = qr/\(($xn(?:\s*,\s*$xn)*)\)/;
	    die eval dw qw($table_qname $line) unless (my $table = $db->{tables}{$table_qname})
		&& defined($line = <$in>)
		&& $line =~ /\A\s*add\s+foreign\s+key\s+$xk\s+references\s+$xnp\s+$xk/gci;
	    my($list,$ref_table,$ref_list) = ($1,$2,$3,$4);
	    my($on_delete,$on_update);
	    while($line =~ /\G\s+ON\s+(DELETE|UPDATE)\s+(CASCADE|NO\s+ACTION|SET\s+NULL|RESTRICT)/gci) {
		my($k,$a) = ($1,$2);
		if('RESTRICT' eq uc $a) {}
		elsif('DELETE' eq uc $k) { $on_delete = $a; }
		elsif('UPDATE' eq uc $k) { $on_update = $a; }
		else { die; }
	    }
	    die eval dw qw($table_qname $line) unless $line =~ /\G\s*;\s*\z/gci;
	    my @list = &split_key_fields($list);
	    my @ref_list = &split_key_fields($ref_list);
	    die if @list != 1; #+++
	    die if @list != @ref_list;
	    die eval dw qw(\@list $table) unless $table->{fields}{$list[0]};
	    die eval dw qw($table_qname \@list $table->{fields}{$list[0]}) if $table->{fields}{$list[0]}{ref};
	    if(my $high = hv $low_table_names, $ref_table) { $ref_table = $high; }
	    $table->{fields}{$list[0]}{ref} = { qtable => $ref_table, id => $ref_list[0],
		(defined($on_delete) ? (on_delete => lc($on_delete)) : ()),
		(defined($on_update) ? (on_update => lc($on_update)) : ()) };
	}
	elsif($line =~ /\A\s*delimiter\s+;;+\s*\z/i) {
	    my $sql;
	    while(1) {
		die eval dw qw($sql) unless defined($line = <$in>);
		last if $line =~ /\A\s*delimiter\s+;\s*\z/i;
		$sql .= $line;
	    }
	    my $trigger = &read_mysql_trigger($sql);
	    die eval dw qw($trigger $db->{triggers}{$trigger->{qname}}) if $db->{triggers}{$trigger->{qname}};
	    $db->{triggers}{$trigger->{qname}} = $trigger;
	}
	elsif($line =~ /\A\s*\/\*!.*\*\/\s*;\s*\z/) {}
	else { die eval dw qw($line); }
    }
    xclose $in;
    return $db;
}

sub read_mysql_struct {
    my $ct = shift;
    my $table;
    die eval dw qw($table_name $ct) unless $ct =~ /\ACREATE TABLE (`.+`) \(\n/gci;
    $table->{qname} = $1;
    my $xn = qr/\`[^,\\\`]+\`/;
    my $xnp = qr/(\`[^,\\\`]+\`)/;
    my $xk = qr/\(($xn(?:\s*,\s*$xn)*)\)/;
    my $prev_field_name;
read_mysql_struct_line:
    my $comma = 0;
    if($ct =~ /\G\s*(\`.+\`)\s+(\w+(?:\([^\)]+\))?(?:\s+unsigned)?)(?:(\s+NOT\s+NULL)|\s+NULL)?(\s+AUTO_INCREMENT)?(?:\s+DEFAULT (?:NULL|(CURRENT_TIMESTAMP|b?'.*?')))?(?:\s+ON\s+UPDATE\s+(CURRENT_TIMESTAMP|'.*?'))?(?:\s+COMMENT\s+'.*')?(,?)\n/gci) {
	my $field = {};
	(@{$field}{qw(qname sql_type not_null auto_increment default on_update)}, $comma) = ($1,$2,$3,$4,$5,$6,$7);
	if(my $t = $type_map{$field->{sql_type}}) { $field->{sql_type} = $t; }
	push @{$table->{field_sequence}}, $field;
	$table->{fields}{$field->{qname}} = $field;
	$field->{prev_field_name} = $prev_field_name;
	$prev_field_name = $field->{qname};
    }
    elsif($ct =~ /\G\s*PRIMARY\s+KEY\s*\((\`[^,\\\`]+\`(?:\s*,\s*\`[^,\\\`]+\`)*)\)(,?)\n/gci) {
	(my($list),$comma) = ($1,$2);
	$table->{primary_key} = [ &split_key_fields($list) ];
    }
    elsif($ct =~ /\G\s*(UNIQUE\s+)?KEY(?:\s+(\`[^\\\`]+\`))?\s*\((\`[^,\\\`]+\`(?:\s*,\s*\`[^,\\\`]+\`)*)\)(,?)\n/gci) {
	(my($unique,$qname,$list),$comma) = ($1,$2,$3,$4);
	push @{$table->{$unique ? 'unique_keys' : 'keys'}}, { qname => $qname, fields => [ &split_key_fields($list) ] };
    }
    elsif($ct =~ /\G\s*(?:CONSTRAINT\s+($xn)\s+)?FOREIGN\s+KEY\s+$xk\s+REFERENCES\s+$xnp\s+$xk/gci) {
	my($name,$list,$ref_table,$ref_list) = ($1,$2,$3,$4);
	my($on_delete,$on_update);
	while($ct =~ /\G(?:\s+ON\s+(DELETE|UPDATE)\s+(CASCADE|NO\s+ACTION|SET\s+NULL|RESTRICT))?((,?)\n)?/gci) {
	    my($k,$a,$x,$c) = ($1,$2,$3,$4);
	    unless($k) { die eval dw qw($k $a $x $c), 'pos($ct)', 'length($ct)', 'substr($ct, pos($ct), 20)', '$ct' unless $x; }
	    # elsif(!defined $a) { die eval dw qw($k $a $x $c), 'pos($ct)', 'length($ct)', 'substr($ct, pos($ct), 20)', '$ct'; }
	    elsif('RESTRICT' eq uc $a) {}
	    elsif('DELETE' eq uc $k) { $on_delete = $a; }
	    elsif('UPDATE' eq uc $k) { $on_update = $a; }
	    else { die; }
	    if(defined $x) { $comma = $c; last; }
	}
	my @list = &split_key_fields($list);
	my @ref_list = &split_key_fields($ref_list);
	die if @list != 1; #+++
	die if @list != @ref_list;
	die eval dw qw(\@list $table) unless $table->{fields}{$list[0]};
	die eval dw qw($table->{name} \@list $table->{fields}{$list[0]}) if $table->{fields}{$list[0]}{ref};
	if(my $high = hv $low_table_names, $ref_table) { $ref_table = $high; }
	$table->{fields}{$list[0]}{ref} = { qtable => $ref_table, id => $ref_list[0], constraint => $name,
	    (defined($on_delete) ? (on_delete => lc($on_delete)) : ()),
	    (defined($on_update) ? (on_update => lc($on_update)) : ()) };
    }
    else { die eval &dw('pos($ct)', 'length($ct)', 'substr($ct, pos($ct), 20)', '$ct'); }
    goto read_mysql_struct_line if $comma;
    die eval dw('pos($ct)', 'length($ct)', 'substr($ct, pos($ct), 20)', '$ct')
	unless $ct =~ /\G\) ENGINE=\w+(?: AUTO_INCREMENT=\d+)? (?:DEFAULT CHARSET|CHARACTER SET)=\w+(?: COMMENT='.*')?\s*(?:;\s*)?\z/gci;
    #+++ Обработать Engine и Charset
    return $table;
}

sub split_key_fields { split /\s*,\s*/, shift; }
# Ранее в этой функции было еще и удаление кавычек. Теперь я бы отдельную функцию создавать бы уже не стал, но и удалять ее тоже нет желания.

sub sql_alter_tables {
    my $old_struct = shift;
    my $new_struct = shift;
    my $ctx = {};
    my @old = sort keys %{$old_struct->{tables} || {}};
    my @new = sort keys %{$new_struct->{tables} || {}};
    my $need_table_nl;
    my $check_print = sub {
	# В старом коде эта функция позволяла выводить информацию выборочно по одной/нескольким таблицам
	# В новом коде такого функционала пока не предусмотрено, но совсем этот код удалять не стал, может пригодиться.
	my $table = shift;
	if(1) { return $table; }
	else { return; }
    };
    my $drop = sub {
	my $table = shift;
	if($check_print->({ qname => $table })) {
	    print +($attrs{uncomment_drops} ? '' : '-- '), 'drop table ', $table, ";\n";
	    $need_table_nl = 1;
	}
    };
    my $create = sub {
	my $table = shift;
	$ctx->{printed_tables}{$table->{qname}} = 1;
	if($check_print->($table)) {
	    &print_create_table($ctx, $table);
	    $need_table_nl = 0;
	}
	&print_deferred_keys($ctx, $table);
    };
    while(@old && @new) {
	if($old[0] lt $new[0]) { $drop->(shift @old); }
	elsif($old[0] gt $new[0]) { $create->($new_struct->{tables}{shift @new}); }
	else {
	    my $told = $old_struct->{tables}{shift @old};
	    my $table = $new_struct->{tables}{shift @new};
	    if($check_print->($table)) {
		my($header_printed,@comments);
		my $print_field = sub {
		    if($_[0] eq '-- ') {
			push @comments, ",\n" if @comments;
			push @comments, @_;
		    }
		    else {
			if($header_printed) {
			    print ",\n";
			}
			else {
			    $header_printed = 1;
			    print "\n" if $need_table_nl;
			    print 'alter table ', $table->{qname}, "\n";
			}
			if(@comments) {
			    print @comments, ",\n";
			    @comments = ();
			}
			print @_;
		    }
		};
		my $drop_field = sub {
		    my $field = shift;
		    $print_field->(($attrs{uncomment_drops} ? '' : '-- '), '  drop foreign key ', $field->{ref}{constraint}) if $field->{ref};
		    $print_field->(($attrs{uncomment_drops} ? '' : '-- '), '  drop ', $field->{qname});
		};
		my $add_field = sub {
		    my $field = shift;
		    $print_field->('  add ', &get_field_sql($field), !@_ ? () : !$_[0] ? ' first' : (' after ', shift->{qname}));
		    if($field->{ref}) {
			&add_foreign_deferred($ctx, $table, $field, sub { $print_field->('  add ', @_); });
		    }
		};
		my @f1 = sort { $a->{qname} cmp $b->{qname} } @{$told->{field_sequence}};
		my @f2 = sort { $a->{qname} cmp $b->{qname} } @{$table->{field_sequence}};
		while(@f1 && @f2) {
		    if($f1[0]->{qname} lt $f2[0]->{qname}) { shift(@f1)->{old} = 1; }
		    elsif($f1[0]->{qname} gt $f2[0]->{qname}) { shift(@f2)->{new} = 1; }
		    else {
			my $f1 = shift @f1; my $f2 = shift @f2;
			my $s1 = join '', &get_field_text($old_struct, $f1, 'data');
			my $s2 = join '', &get_field_text($new_struct, $f2, 'data');
			if($s1 ne $s2) { $f2->{differ} = 1; }
			my $s1r = join '', &get_field_text($old_struct, $f1, 'ref');
			my $s2r = join '', &get_field_text($new_struct, $f2, 'ref');
			if($s1r ne $s2r) { $f2->{differ_ref} = 1; }
		    }
		}
		while(@f1) { shift(@f1)->{old} = 1; }
		while(@f2) { shift(@f2)->{new} = 1; }
		@f1 = @{$told->{field_sequence}};
		@f2 = @{$table->{field_sequence}};
		my $prev_field;
		while(@f1 && @f2) {
		    if($f1[0]->{old}) { $drop_field->(shift @f1); }
		    elsif($f2[0]->{new}) { my $f2 = shift @f2; $add_field->($f2, $prev_field); $prev_field = $f2; }
		    else {
			$print_field->('  drop foreign key ', $f1[0]->{ref}{constraint}) if $f1[0]->{ref} && $f2[0]->{differ_ref};
			$print_field->('  modify ', &get_field_sql($f2[0])) if $f2[0]->{differ};
			if($f2[0]->{ref} && $f2[0]->{differ_ref}) {
			    &add_foreign_deferred($ctx, $table, $f2[0], sub { $print_field->('  add ', @_); });
			}
			#+++ field sequence change
			shift @f1; $prev_field = shift @f2;
		    }
		}
		while(@f1) { $drop_field->(shift @f1); }
		while(@f2) { $add_field->(shift @f2); }
		&alter_keys($told, $table, $print_field, ($attrs{uncomment_drops} ? '' : '-- '), 'unique_keys', 'unique');
		&alter_keys($told, $table, $print_field, ($attrs{uncomment_drops} ? '' : '-- '), 'keys', 'key', 'foreign');
		if($header_printed) {
		    print "\n", @comments if @comments;
		    print "\n;\n\n";
		    $need_table_nl = 0;
		}
		elsif(@comments) {
		    print "\n" if $need_table_nl;
		    print '-- alter table ', $table->{qname}, "\n", @comments;
		    print "\n-- ;\n\n";
		    $need_table_nl = 0;
		}
	    }
	    $ctx->{printed_tables}{$table->{qname}} = 1;
	    &print_deferred_keys($ctx, $table);
	}
    }
    while(@old) { $drop->(shift @old); }
    while(@new) { $create->(shift @new); }
}

sub get_field_text {
#     my($db,@args) = @_;
#     my @r = &get_field_text_($db,@args);
#     foreach(@r) {
# 	die eval dw qw (\@r \@args) unless $_;
#     }
#     return @r;
# }
# sub get_field_text_ {
    my $db = shift;
    my $field = shift;
    my $part = shift; # data | ref
    my $gen_after = shift;
    my $gen_data = shift;
    return (!$part || $part eq 'data' ? ($field->{qname}, ($gen_data ? ("\t.\t") : (' ')), $field->{sql_type}, ($field->{not_null} ? ' not null' : ()),
	($field->{default} ? (' default ', $field->{default}) : ($field->{sql_type} eq 'timestamp' && $field->{not_null}) ? (' default CURRENT_TIMESTAMP') : ()),
	($field->{on_update} ? (' on update ', $field->{on_update}) : ($field->{sql_type} eq 'timestamp' && $field->{not_null} && !$field->{default}) ? (' on update CURRENT_TIMESTAMP') : ()),
	($field->{auto_increment} ? (' auto_increment') : ())) : ()),
	((!$part || $part eq 'ref') && $field->{ref} ? (
	     ' references ', $field->{ref}{qtable}, ' (', &get_ref_id($db, $field), ')',
	     ($field->{ref}{on_delete} ? (' on delete ', $field->{ref}{on_delete}) : ()),
	     ($field->{ref}{on_update} ? (' on update ', $field->{ref}{on_update}) : ()),
	 ) : ()),
	($gen_after ? (defined($field->{prev_field_name}) ? (' after ', $field->{prev_field_name}) : (' first')) : ());
}

sub get_field_sql {
    my $field = shift;
    return $field->{qname}, ' ', $field->{sql_type},
	($field->{not_null} ? ' not' : ''), ' null',
	(defined $field->{default} ? (' default ', $field->{default}) : ()),
	(defined $field->{on_update} ? (' on update ', $field->{on_update}) : ()),
	($field->{auto_increment} ? ' auto_increment' : ());
}

sub get_ref_id {
    my $db = shift;
    my $field = shift;
    die eval dw qw($field) unless $field->{ref};
    return $field->{ref}{id} if $field->{ref}{id};
    &Carp::confess(eval dw qw($field)) unless my $ref_table = $db->{tables}{$field->{ref}{qtable}};
    die unless $ref_table->{primary_key};
    die eval dw qw($field) unless @{ $ref_table->{primary_key} } == 1;
    return $ref_table->{primary_key}[0];
}

sub get_ref_sql {
    my $db = shift;
    my $field = shift;
    return "foreign key (", $field->{qname}, ') references ', $field->{ref}{qtable}, ' (', &get_ref_id($db, $field), ')',
	map(&references_restrict($field, $_), 'on update', 'on delete');
}

sub references_restrict {
    my $field = shift;
    my $cond = shift;
    my $key = $cond; $key =~ s/ /_/g;
    if(my $r = hv $field, 'ref', $key) {
	if(lc($r) eq 'cascade') { return ' '.$cond.' cascade'; }
	elsif($r =~ /\Aset\s+null\z/i) { return ' '.$cond.' set null'; }
	elsif($r =~ /\Ano\s+action\z/i) { return ' '.$cond.' no action'; }
    }
    return ' '.$cond.' restrict';
}

sub alter_keys {
    my $told = shift;
    my $table = shift;
    my $print_field = shift;
    my $drop_comment = shift;
    my $kk = shift;
    my $kn = shift;
    my $foreign = shift;
    my @l1 = sort { $a->{key} cmp $b->{key} } map { qname => $_->{qname}, key => join(',', @{$_->{fields}}) },
	@{$told->{$kk} || []};
    my @l2 = sort { $a->{key} cmp $b->{key} }
	map({ qname => $_->{qname}, key => join(',', @{$_->{fields}}), fields => $_->{fields} }, @{$table->{$kk} || []}),
	($foreign ? map($_->{ref} ? { key => $_->{qname}, auto => 1 } : (), @{$table->{field_sequence}}) : ());
    while(@l1 && @l2) {
	if($l1[0]->{key} lt $l2[0]->{key}) { my $k = shift @l1; $print_field->($drop_comment, '  drop key ', $k->{qname}); }
	elsif($l1[0]->{key} gt $l2[0]->{key}) { my $k = shift @l2; $print_field->('  add ', $kn, ' ', &quoted_key_fields($k->{fields})) unless $k->{auto}; }
	else { shift @l1; my $k = shift @l2; shift @l2 if @l2 && $l2[0]->{key} eq $k->{key} && ($k->{auto} || $l2[0]->{auto}); }
    }
    while(@l1) { my $k = shift @l1; $print_field->($drop_comment, '  drop key ', $k->{qname}); }
    while(@l2) { my $k = shift @l2; $print_field->('  add ', $kn, ' ', &quoted_key_fields($k->{fields})) unless $k->{auto}; }
}

sub quoted_key_fields {
    my $fields = shift;
    dieN 5, eval dw qw($fields) unless $fields && 'ARRAY' eq ref $fields;
    return '(', join(', ', @$fields), ')';
}

sub print_deferred_keys {
    my $ctx = shift;
    my $table = shift;
    if(my $deferred = delete $ctx->{deferred_keys}{$table->{qname}}) {
	my $prev;
	foreach my $sql (@$deferred) {
	    my $t = shift @$sql;
	    if(defined($prev) && $prev eq $t) {
		print ",\n";
	    }
	    else {
		if(defined $prev) { print ";\n\n"; }
		print 'alter table ', $t, "\n";
		$prev = $t;
	    }
	    print "\tadd ", @$sql;
	}
	if(defined $prev) { print ";\n\n"; }
    }
}

sub add_foreign_deferred {
    my $ctx = shift;
    my $table = shift;
    my $field = shift;
    my $add = shift;
    my @sql = &get_ref_sql($table, $field);
    if($ctx->{printed_tables}{$field->{ref}{qtable}}) {
	$add->(@sql);
    }
    else {
	push @{$ctx->{deferred_keys}{$field->{ref}{qtable}}},
	[$table->{qname}, @sql];
    }
}

sub print_create_table {
    my $ctx = shift;
    my $table = shift;
    print 'create table ', $table->{qname}, " (\n";
    my $first_field = 1;
    foreach my $field (@{$table->{field_sequence}}) { if($field) {
	if($first_field) { undef $first_field; } else { print ",\n"; }
	print "\t", &get_field_sql($field);
	if($field->{ref}) {
	    &add_foreign_deferred($ctx, $table, $field, sub { print ",\n\t", @_; });
	}
    } }
    if($table->{primary_key}) {
	if($first_field) { undef $first_field; } else { print ",\n"; }
	print "\tprimary key ", &quoted_key_fields($table->{primary_key});
    }
    if($table->{unique_keys}) { foreach my $unique (@{$table->{unique_keys}}) {
	if($first_field) { undef $first_field; } else { print ",\n"; }
	print "\tunique key ", &quoted_key_fields($unique->{fields});
    } }
    if($table->{keys}) { foreach my $key (@{$table->{keys}}) {
	if($first_field) { undef $first_field; } else { print ",\n"; }
	print "\tkey ", &quoted_key_fields($key->{fields});
    } }
    print "\n" unless $first_field;
    print ") engine=InnoDB";
    print " auto_increment=", $table->{start_auto_increment} if defined $table->{start_auto_increment};
    print " character set=utf8;\n\n";
}

sub read_mysql_trigger {
    my $ct = shift;
    if($ct =~ /\A\s*\s*(?:--\s*)?drop\s+trigger\s+`.+?`\s*;+\s+create\s+trigger\s+(`.+?`)\s+(before|after)\s+(insert|update|delete)\s+on\s+(`.+?`)\s+(for\s+each\s+row)\s+(begin\s.*\bend)(?:\s*;)?\s*;+\s*\z/si) {
	my $trigger = {};
	@{$trigger}{qw(qname time action qtable each body)} = ($1,$2,$3,$4,$5,$6);
	# warn eval dw qw($trigger $ct);
	return $trigger
    }
    else {
	die eval dw qw($ct);
    }
}

sub sql_alter_triggers {
    my $old_struct = shift;
    my $new_struct = shift;
    my @old = sort { $a->{qname} cmp $b->{qname} } values %{$old_struct->{triggers} || {}};
    my @new = sort { $a->{qname} cmp $b->{qname} } values %{$new_struct->{triggers} || {}};
    my $need_nl;
    my $check_print = sub {
	my $t = shift;
	if(1) { return $t; }
	else { return; }
    };
    my $drop = sub {
	my $t = shift;
	my $force = shift;
	if($check_print->($t)) {
	    print "\n" if $need_nl;
	    print +($force || $attrs{uncomment_drops} ? '' : '-- '), 'drop trigger ', $t->{qname}, ";\n";
	    $need_nl = 0;
	}
    };
    my $create = sub {
	my $t = shift;
	if($check_print->($t)) {
	    print "\n" if $need_nl;
	    print "delimiter ;;;\n";
	    &print_create_trigger($t);
	    print "delimiter ;\n";
	    $need_nl = 1;
	}
    };
    while(@old && @new) {
	if($old[0]->{qname} lt $new[0]->{qname}) { $drop->(shift @old); }
	elsif($old[0]->{qname} gt $new[0]->{qname}) { $create->(shift @new); }
	else {
	    my $told = shift @old;
	    my $tnew = shift @new;
	    if($check_print->($tnew)) {
		my $differ;
		foreach my $k (qw(action qtable time)) {
		    if(lc($told->{$k}) ne lc($tnew->{$k})) { $differ = 1; last; }
		}
		if(!$differ && lc($told->{body}) ne lc($tnew->{body})) { $differ = 1; }
		if($differ) {
		    if($need_nl) {
			print "\n";
			undef $need_nl;
		    }
		    print "lock tables ", $tnew->{qtable}, " write;\n";
		    $drop->($told, 'force');
		    $create->($tnew);
		    print "unlock tables;\n";
		}
	    }
	}
    }
    while(@old) { $drop->(shift @old); }
    while(@new) { $create->(shift @new); }
}

sub print_create_trigger {
    my $trigger = shift;
    print 'create trigger ', $trigger->{qname}, ' ', $trigger->{time}, ' ', $trigger->{action},
	' on ', $trigger->{qtable}, ' ', $trigger->{each}, ' ',
	"\n", $trigger->{body}, "\n;;;\n\n";
}
